{"ast":null,"code":"var _jsxFileName = \"C:\\\\Food Recommender Bot\\\\frontend\\\\src\\\\components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"../components/ChatApp.css\"; // ✅ Correct path\nimport bgImage from \"../assets/chatbot-bg.jpg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbot() {\n  _s();\n  const [messages, setMessages] = useState([{\n    text: \"Hello! Enter ingredients to get recipes.\",\n    sender: \"bot\"\n  }]);\n  const [input, setInput] = useState(\"\");\n  const [showExtraButtons, setShowExtraButtons] = useState(false);\n  const chatBoxRef = useRef(null);\n  const inputRef = useRef(null);\n\n  // ✅ Auto-scroll to latest message\n  useEffect(() => {\n    if (chatBoxRef.current) {\n      chatBoxRef.current.scrollTop = chatBoxRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  // ✅ Send message when Enter is pressed\n  useEffect(() => {\n    const handleKeyPress = event => {\n      if (event.key === \"Enter\") {\n        event.preventDefault();\n        sendMessage();\n      }\n    };\n    const inputElement = inputRef.current;\n    if (inputElement) {\n      inputElement.addEventListener(\"keypress\", handleKeyPress);\n    }\n    return () => {\n      if (inputElement) {\n        inputElement.removeEventListener(\"keypress\", handleKeyPress);\n      }\n    };\n  }, []);\n\n  // ✅ Function to send ingredients and get matching recipes\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    const userMessage = {\n      text: input,\n      sender: \"user\"\n    };\n    setMessages(prev => [...prev, userMessage]);\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/get_recipes\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          ingredients: input\n        })\n      });\n      const data = await response.json();\n      if (data.response) {\n        const formattedResponse = data.response.replace(/\\n/g, \"<br>\").replace(/\\*\\*(.*?)\\*\\*/g, \"<strong>$1</strong>\");\n        setMessages(prev => [...prev, {\n          text: formattedResponse,\n          sender: \"bot\",\n          isHTML: true\n        }]);\n      } else {\n        setMessages(prev => [...prev, {\n          text: \"⚠️ No recipes found!\",\n          sender: \"bot\"\n        }]);\n      }\n    } catch (error) {\n      setMessages(prev => [...prev, {\n        text: \"❌ Sorry, there was an error processing your request.\",\n        sender: \"bot\"\n      }]);\n      console.error(\"Error fetching recipes:\", error);\n    }\n    setInput(\"\");\n  };\n\n  // ✅ Fetch a single random recipe\n  const getRandomRecipe = async () => {\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/random-recipe\");\n      const data = await response.json();\n      if (data.response) {\n        const formattedResponse = data.response.replace(/\\n/g, \"<br>\").replace(/\\*\\*(.*?)\\*\\*/g, \"<strong>$1</strong>\");\n        setMessages(prev => [...prev, {\n          text: formattedResponse,\n          sender: \"bot\",\n          isHTML: true\n        }]);\n      } else {\n        setMessages(prev => [...prev, {\n          text: \"❌ No random recipe found.\",\n          sender: \"bot\"\n        }]);\n      }\n    } catch (error) {\n      setMessages(prev => [...prev, {\n        text: \"❌ Error fetching random recipe.\",\n        sender: \"bot\"\n      }]);\n      console.error(\"Error fetching random recipe:\", error);\n    }\n  };\n\n  // ✅ Fetch 3 random recipes\n  const getThreeRandomRecipes = async () => {\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/three-random-recipes\");\n      const data = await response.json();\n      if (data.response) {\n        const formattedResponse = data.response.replace(/\\n/g, \"<br>\").replace(/\\*\\*(.*?)\\*\\*/g, \"<strong>$1</strong>\");\n        setMessages(prev => [...prev, {\n          text: formattedResponse,\n          sender: \"bot\",\n          isHTML: true\n        }]);\n      } else {\n        setMessages(prev => [...prev, {\n          text: \"❌ No random recipes found.\",\n          sender: \"bot\"\n        }]);\n      }\n    } catch (error) {\n      setMessages(prev => [...prev, {\n        text: \"❌ Error fetching random recipes.\",\n        sender: \"bot\"\n      }]);\n      console.error(\"Error fetching random recipes:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-box\",\n        ref: chatBoxRef,\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.sender}`,\n          children: msg.isHTML ? /*#__PURE__*/_jsxDEV(\"span\", {\n            dangerouslySetInnerHTML: {\n              __html: msg.text\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 29\n          }, this) : msg.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          ref: inputRef // ✅ Added ref for Enter key listener\n          ,\n          onChange: e => setInput(e.target.value),\n          placeholder: \"Enter ingredients...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"plus-button\",\n          onClick: () => setShowExtraButtons(!showExtraButtons),\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), showExtraButtons && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"extra-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: getRandomRecipe,\n            className: \"random-recipe-btn\",\n            children: \"\\uD83C\\uDFB2 Random Recipe\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: getThreeRandomRecipes,\n            className: \"three-random-btn\",\n            children: \" \\uD83D\\uDD25Top 3 Trending Recipes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"252mzShxrbCMfwQMysZZZ2hHd+w=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","bgImage","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","text","sender","input","setInput","showExtraButtons","setShowExtraButtons","chatBoxRef","inputRef","current","scrollTop","scrollHeight","handleKeyPress","event","key","preventDefault","sendMessage","inputElement","addEventListener","removeEventListener","trim","userMessage","prev","response","fetch","method","headers","body","JSON","stringify","ingredients","data","json","formattedResponse","replace","isHTML","error","console","getRandomRecipe","getThreeRandomRecipes","className","children","ref","map","msg","index","dangerouslySetInnerHTML","__html","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Food Recommender Bot/frontend/src/components/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"../components/ChatApp.css\";  // ✅ Correct path\r\nimport bgImage from \"../assets/chatbot-bg.jpg\"; \r\n\r\nfunction Chatbot() {\r\n  const [messages, setMessages] = useState([\r\n    { text: \"Hello! Enter ingredients to get recipes.\", sender: \"bot\" }\r\n  ]);\r\n  const [input, setInput] = useState(\"\");\r\n  const [showExtraButtons, setShowExtraButtons] = useState(false);\r\n  const chatBoxRef = useRef(null);\r\n  const inputRef = useRef(null);\r\n\r\n  // ✅ Auto-scroll to latest message\r\n  useEffect(() => {\r\n    if (chatBoxRef.current) {\r\n      chatBoxRef.current.scrollTop = chatBoxRef.current.scrollHeight;\r\n    }\r\n  }, [messages]);\r\n\r\n  // ✅ Send message when Enter is pressed\r\n  useEffect(() => {\r\n    const handleKeyPress = (event) => {\r\n      if (event.key === \"Enter\") {\r\n        event.preventDefault();\r\n        sendMessage();\r\n      }\r\n    };\r\n\r\n    const inputElement = inputRef.current;\r\n    if (inputElement) {\r\n      inputElement.addEventListener(\"keypress\", handleKeyPress);\r\n    }\r\n\r\n    return () => {\r\n      if (inputElement) {\r\n        inputElement.removeEventListener(\"keypress\", handleKeyPress);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // ✅ Function to send ingredients and get matching recipes\r\n  const sendMessage = async () => {\r\n    if (!input.trim()) return;\r\n\r\n    const userMessage = { text: input, sender: \"user\" };\r\n    setMessages((prev) => [...prev, userMessage]);\r\n\r\n    try {\r\n      const response = await fetch(\"http://127.0.0.1:5000/get_recipes\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ ingredients: input })\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (data.response) {\r\n        const formattedResponse = data.response\r\n          .replace(/\\n/g, \"<br>\")\r\n          .replace(/\\*\\*(.*?)\\*\\*/g, \"<strong>$1</strong>\");\r\n\r\n        setMessages((prev) => [...prev, { text: formattedResponse, sender: \"bot\", isHTML: true }]);\r\n      } else {\r\n        setMessages((prev) => [...prev, { text: \"⚠️ No recipes found!\", sender: \"bot\" }]);\r\n      }\r\n    } catch (error) {\r\n      setMessages((prev) => [...prev, { text: \"❌ Sorry, there was an error processing your request.\", sender: \"bot\" }]);\r\n      console.error(\"Error fetching recipes:\", error);\r\n    }\r\n\r\n    setInput(\"\");\r\n  };\r\n\r\n  // ✅ Fetch a single random recipe\r\n  const getRandomRecipe = async () => {\r\n    try {\r\n      const response = await fetch(\"http://127.0.0.1:5000/random-recipe\");\r\n      const data = await response.json();\r\n\r\n      if (data.response) {\r\n        const formattedResponse = data.response\r\n          .replace(/\\n/g, \"<br>\")\r\n          .replace(/\\*\\*(.*?)\\*\\*/g, \"<strong>$1</strong>\");\r\n\r\n        setMessages((prev) => [...prev, { text: formattedResponse, sender: \"bot\", isHTML: true }]);\r\n      } else {\r\n        setMessages((prev) => [...prev, { text: \"❌ No random recipe found.\", sender: \"bot\" }]);\r\n      }\r\n    } catch (error) {\r\n      setMessages((prev) => [...prev, { text: \"❌ Error fetching random recipe.\", sender: \"bot\" }]);\r\n      console.error(\"Error fetching random recipe:\", error);\r\n    }\r\n  };\r\n\r\n  // ✅ Fetch 3 random recipes\r\n  const getThreeRandomRecipes = async () => {\r\n    try {\r\n      const response = await fetch(\"http://127.0.0.1:5000/three-random-recipes\");\r\n      const data = await response.json();\r\n\r\n      if (data.response) {\r\n        const formattedResponse = data.response\r\n          .replace(/\\n/g, \"<br>\")\r\n          .replace(/\\*\\*(.*?)\\*\\*/g, \"<strong>$1</strong>\");\r\n\r\n        setMessages((prev) => [...prev, { text: formattedResponse, sender: \"bot\", isHTML: true }]);\r\n      } else {\r\n        setMessages((prev) => [...prev, { text: \"❌ No random recipes found.\", sender: \"bot\" }]);\r\n      }\r\n    } catch (error) {\r\n      setMessages((prev) => [...prev, { text: \"❌ Error fetching random recipes.\", sender: \"bot\" }]);\r\n      console.error(\"Error fetching random recipes:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chat-container\">\r\n        <div className=\"chat-box\" ref={chatBoxRef}>\r\n          {messages.map((msg, index) => (\r\n            <div key={index} className={`message ${msg.sender}`}>\r\n              {msg.isHTML ? <span dangerouslySetInnerHTML={{ __html: msg.text }} /> : msg.text}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"input-container\">\r\n          <input\r\n            type=\"text\"\r\n            value={input}\r\n            ref={inputRef} // ✅ Added ref for Enter key listener\r\n            onChange={(e) => setInput(e.target.value)}\r\n            placeholder=\"Enter ingredients...\"\r\n          />\r\n          <button onClick={sendMessage}>Send</button>\r\n\r\n          {/* ✅ Plus button to toggle extra options */}\r\n          <button className=\"plus-button\" onClick={() => setShowExtraButtons(!showExtraButtons)}>+</button>\r\n\r\n          {/* ✅ Extra options appear when plus button is clicked */}\r\n          {showExtraButtons && (\r\n            <div className=\"extra-buttons\">\r\n              <button onClick={getRandomRecipe} className=\"random-recipe-btn\">🎲 Random Recipe</button>\r\n              <button onClick={getThreeRandomRecipes} className=\"three-random-btn\"> 🔥Top 3 Trending Recipes</button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}